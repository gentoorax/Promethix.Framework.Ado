name: adoscope-nuget-publish-promote-stable
on:
  workflow_dispatch:
    inputs:
      package_version:
        description: 'NuGet package version to approve'
        required: true
        default: '1.0.0-commithash-alpha'
      new_package_version:
        description: 'Promotion version'
        required: true
        default: '1.0.0'

env:
  NuGetDirectory: ${{ github.workspace}}/nuget
  NuGetDirectoryWin: ${{ github.workspace}}\nuget

jobs:
  publish:
    name: Publish Promethix.Framework.Ado
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0 # This is crucial to fetch all history for tagging

    - name: Download artifact
      id: download-artifact
      uses: dawidd6/action-download-artifact@v2
      with:
        name: Promethix.Framework.Ado.NuGet.${{ inputs.package_version }}
        github_token: ${{ secrets.REPO_ACCESS_TOKEN }}
        workflow: adoscope-nuget-build.yaml
        path: ${{ env.NuGetDirectory }}
        search_artifacts: true

    # - name: Publish Nuget Package Promethix.Framework.Ado
    #   needs: download-artifact
    #   working-directory: .
    #   run: |
    #     echo Directory List
    #     ls
    #     echo NuGet Directory List
    #     ls ${{ env.NuGetDirectory }}
    #     PACKAGE_VERSION=${{ inputs.new_package_version }}
    #     dotnet nuget push ${{ env.NuGetDirectory }}/Promethix.Framework.Ado.${PACKAGE_VERSION}.nupkg --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_API_KEY }}

    - name: Extract Commit Hash and Tag
      env:
        PACKAGE_VERSION: ${{ github.event.inputs.package_version }}
        NEW_PACKAGE_VERSION: ${{ github.event.inputs.new_package_version }}
      run: |
        $pattern = '-([0-9a-f]{7,40})-alpha'
        if ($env:PACKAGE_VERSION -match $pattern) {
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          $commitHash = $Matches[1]
          # Checkout the commit
          git fetch --depth=1 origin $commitHash
          git checkout $commitHash
          # Tag the commit
          git tag -a $env:NEW_PACKAGE_VERSION -m "Promote $env:PACKAGE_VERSION to $env:NEW_PACKAGE_VERSION"
          # Push the tag
          git push origin refs/tags/$env:NEW_PACKAGE_VERSION
        } else {
          Write-Error "Commit hash not found in package version."
          exit 1
        }
      shell: pwsh